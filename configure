#!/bin/bash

function useage() {
  echo "Useage: configure [OPTIONS]"
  echo ""
  echo "Options:"
  echo "    -u  performs unsafe installation, exiting if anything already exists"
  echo "    -n  configures neovim (will install vim-plug to \$HOME/.vim/bundle)"
  echo "    -v  configures vim (will install vim-plug to \$HOME/.vim/bundle)"
  echo "    -b  configures bash"
  return
}

function setup() {
  local root="$(cd "$(dirname "$0")" ; pwd -P)"

  local zshenv_source="${root}/shell-configs/zsh/.zshenv"
  local zshenv_destination="${HOME}/.zshenv"
  local zshrc_source="${root}/shell-configs/zsh/.zshrc"
  local zshrc_destination="${HOME}/.zsh/.zshrc"
  local zshrc_dir="$(dirname $zshrc_destination)"

  local bash_ext_source="${root}/shell-configs/bash/.bash_extensions"
  local bash_ext_destination="${HOME}/.bash_ext"
  local vimrc_source="${root}/editor-configs/vim/.vimrc"
  local vimrc_destination="${HOME}/.vimrc"
  local vim_bundle="${HOME}/.vim/bundle"
  local vim_plug_destination="${vim_bundle}/vim-plug"
  local nvim_init_source="${root}/editor-configs/nvim/init.vim"
  local nvim_init_destination="${HOME}/.config/nvim/init.vim"

  local OPTIND opt

  local installs=()

  while getopts ':unvbz' opt; do
    case $opt in
      u) unsafe=1;;
      b)
        installs[0]="bash"
        ;;
      n)
        installs[1]="nvim"
        ;;
      v)
        installs[2]="vim"
        ;;
      z)
        installs[3]="zshell"
        ;;
      :) useage;;
      \?) useage && exit 1;;
    esac
  done

  echo "[debug] before installs: '0[${installs[0]}] 1[${installs[1]}] 2[${installs[2]}] 3[${installs[3]}]"

  # ZSH
  if [[ "${installs[3]}" == "zshell" ]]; then
    if [[ ! -f $zshenv_source ]]; then
      echo "[error] unable to find zshell source at '${zshenv_source}'"
      exit 1
    fi

    if [[ -f $zshenv_destination || -L $zshenv_destination ]]; then
      echo "[debug:zsh] found previous zshenv at '${zshenv_destination}'"
      rm $zshenv_destination
    fi

    if [[ ! -d $zshrc_dir ]]; then
      echo "[debug:zsh] unable to find '${zshrc_destination}', creating (${zshrc_dir})"
      mkdir -p $zshrc_dir
    else
      echo "[debug:zsh] found '${zshrc_dir}', deleting"
      rm -rf $zshrc_dir
      mkdir -p $zshrc_dir
    fi

    echo "[debug:zsh] linking zshenv: '${zshenv_source} -> ${zshenv_destination}'"
    ln -s $zshenv_source $zshenv_destination
    echo "[debug:zsh] linking zshrc: '${zshrc_source} -> ${zshrc_destination}'"
    ln -s $zshrc_source $zshrc_destination
  fi

  # BASH
  if [[ "${installs[0]}" == "bash" ]]; then
    if [[ ! -f "${bash_ext_source}" ]]; then
      echo "[error] unable to find bash extensions source here, tried '${bash_ext_source}'"
      exit 1
    fi

    if [[ -f "${bash_ext_destination}" || -L "${bash_ext_destination}" ]]; then
      if [[ $unsafe == 0 ]]; then
        echo "[error] bash ext file '${bash_ext_destination}' found during safe installation, exiting."
        exit 1
      fi

      echo "[debug:bash] bash extension already present, removing"
      rm $bash_ext_destination
    fi

    echo "[debug:bash] installing '${bash_ext_source}' to '${bash_ext_destination}'"
    ln -s $bash_ext_source $bash_ext_destination
  fi

  # COMMON VIM PLUGINS
  if [[ "${installs[2]}" == "vim" || "${installs[1]}" == "nvim" ]]; then
    if [[ -L $vim_bundle || -d $vim_bundle || -f $vim_bundle ]]; then
      if [[ $unsafe == 0 ]]; then
        echo "[error] vim bundle director '${vim_bundle}' found during safe installation, exiting"
        exit 1
      fi

      echo "[debug:nvim-vim] vim bundle directory ('${vim_bundle}') already exists, removing"
      rm -rf $vim_bundle
    fi

    if [[ -d "${vim_plug_destination}" && $unsafe == 0 ]]; then
      echo "[error] vim-plug found '${vim_plug_destination}' found during safe installation, exiting."
      exit 1
    fi

    rm -rf $vim_plug_destination
    mkdir -p $vim_bundle
    echo "[debug:nvim-vim] cloning vim-plug to '${vim_plug_destination}'"
    git clone git@github.com:junegunn/vim-plug.git $vim_plug_destination
  fi

  # VIM
  if [[ "${installs[2]}" == "vim" ]]; then
    if [[ ! -f "${vimrc_source}" ]]; then
      echo "[error] unable to find vimrc source here, tried '${vimrc_source}'"
      exit 1
    fi

    if [[ -f "${vimrc_destination}" || -L "${vimrc_destination}" ]]; then
      if [[ $unsafe == 0 ]]; then
        echo "[error] vimrc found '${vimrc_destination}' found during safe installation, exiting"
        exit 1
      fi

      echo "[debug:vim] vimrc present, removing"
      rm $vimrc_destination
    fi

    echo "[debug:vim] installing '${vimrc_source}' to '${vimrc_destination}'"
    ln -s $vimrc_source $vimrc_destination
    echo "[debug:vim] vimrc installed at '${vimrc_destination}', running vim-plug install"
    vim +PlugInstall +qall
  fi

  # NEOVIM
  if [[ "${installs[1]}" == "nvim" ]]; then
    local config_dir=$(dirname "${nvim_init_destination}")

    if [[ ! -f "${nvim_init_source}" ]]; then
      echo "[error] unable to find nvim init source here, tried '${nvim_init_source}'"
      exit 1
    fi

    if [[ -f $config_dir || -d $config_dir || -L $config_dir ]]; then
      if [[ $unsafe == 0 ]]; then
        echo "[error] attempted to clean '${config_dir}' w/o providing unsafe flag"
        exit 1
      fi

      echo "[debug:nvim] removing old config directory '${config_dir}'"
      rm -rf $config_dir
    fi

    echo "[debug:nvim] linking '${nvim_init_source}' to '${nvim_init_destination}'"
    mkdir -p $config_dir
    ln -s $nvim_init_source $nvim_init_destination
    nvim +PlugInstall +qall
  fi
}

setup "$@"
